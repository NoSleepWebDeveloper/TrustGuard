Installation (Developer Mode)

Open your Chrome/Edge browser and navigate to chrome://extensions/

Enable Developer Mode (toggle top right)

Click Load unpacked and select the folder where you saved the files

Visit websites with known phishing keywords/domains in URL to test blocking:

content.js

const phishingKeywords = [
  "paypal-login", "secure-update", "bank-verification", "apple-id", "reset-password",
  "amazon-security", "free-gift", "account-verify", "login-alert", "verify-account",
  // (Add hundreds more as needed)
];

const suspiciousDomains = [
  "login-paypal-security.com", "secure-amazon-check.com", "apple-id-reset.net",
  "verifybank-login.org", "freegift-cards-claim.com", "update-info-security.net",
  // (Add hundreds more as needed)
];

const currentURL = window.location.href.toLowerCase();
const hostname = window.location.hostname.toLowerCase();

const isSuspicious =
  phishingKeywords.some(keyword => currentURL.includes(keyword)) ||
  suspiciousDomains.some(domain => hostname.includes(domain));

if (isSuspicious) {
  document.documentElement.innerHTML = '';
  document.body.style.backgroundColor = '#111';
  document.body.style.color = 'white';
  document.body.style.fontFamily = 'Arial, sans-serif';
  document.body.style.textAlign = 'center';
  document.body.style.paddingTop = '100px';
  document.body.innerHTML = `
    <h1 style="font-size: 3em; color: red;">⚠Warning: Potential Phishing Site</h1>
    <p>This website may be trying to steal your personal information.</p>
    <p>Access has been blocked by <strong>TrustGuard</strong>.</p>
  `;
}


manifest.json

{
  "manifest_version": 3,
  "name": "TrustGuard – Anti-Phishing",
  "version": "1.0",
  "description": "Blocks access to known or suspicious phishing websites.",
  "permissions": ["tabs", "scripting"],
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"],
      "run_at": "document_start"
    }
  ],
  "icons": {
    "128": "icon.png"
  }
}

json.js

(function() {
  // Create a warning banner function
  function showWarning() {
    if (document.getElementById('ip-warning-banner')) return; // Avoid duplicates
    const banner = document.createElement('div');
    banner.id = 'ip-warning-banner';
    banner.style.position = 'fixed';
    banner.style.top = '0';
    banner.style.left = '0';
    banner.style.right = '0';
    banner.style.backgroundColor = '#ff4c4c';
    banner.style.color = 'white';
    banner.style.fontSize = '16px';
    banner.style.fontWeight = 'bold';
    banner.style.padding = '10px';
    banner.style.zIndex = '9999999';
    banner.style.textAlign = 'center';
    banner.innerText = '⚠️ Warning: This site tried to access your IP address without permission. The attempt was blocked by TrustGuard.';
    document.body.appendChild(banner);
  }

  // Save original RTCPeerConnection
  const OriginalRTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;

  if (!OriginalRTCPeerConnection) {
    // Browser doesn't support WebRTC, no action needed
    return;
  }

  // Override RTCPeerConnection constructor
  function FakeRTCPeerConnection(config, constraints) {
    const pc = new OriginalRTCPeerConnection(config, constraints);

    // Override addIceCandidate method to block real IP leaks
    const originalAddIceCandidate = pc.addIceCandidate.bind(pc);
    pc.addIceCandidate = function(iceCandidate) {
      // Block candidate if it contains a local or public IP address
      if (iceCandidate && iceCandidate.candidate) {
        // Regex to match IPv4 and IPv6 addresses in ICE candidates
        const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})|([a-f0-9:]+)/gi;
        const ips = iceCandidate.candidate.match(ipRegex);
        if (ips && ips.length > 0) {
          // Block the call by returning a resolved Promise without forwarding the candidate
          showWarning();
          return Promise.resolve();
        }
      }
      return originalAddIceCandidate(iceCandidate);
    };

    // Override onicecandidate to block IP info being sent out
    pc.addEventListener('icecandidate', event => {
      if (event.candidate) {
        const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})|([a-f0-9:]+)/gi;
        const ips = event.candidate.candidate.match(ipRegex);
        if (ips && ips.length > 0) {
          // Stop propagation and block candidate from being used
          showWarning();
          event.stopImmediatePropagation();
          // Cannot directly block event from firing, but ignoring candidate in addIceCandidate suffices
        }
      }
    });

    return pc;
  }

  // Copy prototype so instanceof checks pass
  FakeRTCPeerConnection.prototype = OriginalRTCPeerConnection.prototype;

  // Replace the global RTCPeerConnection with our fake one
  window.RTCPeerConnection = FakeRTCPeerConnection;
  window.webkitRTCPeerConnection = FakeRTCPeerConnection;
  window.mozRTCPeerConnection = FakeRTCPeerConnection;
})();
